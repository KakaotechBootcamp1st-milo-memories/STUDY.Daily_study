# 브라우저와 자바스크립트의 변화 과정

# 브라우저의 발전

## 최초의 HTML

1990년대 Tim Berners-Lee가 WWW의 핵심 표준으로 HTML 개발

## 그래픽 웹 브라우저의 등장

- Mosaic(1993) : 이미지와 텍스트를 함께 표시할 수 있는 최초의 브라우저
- Netscope Navigator(1994) : Js같은 동적 스크립트 언어를 최초 지원
- Internet Explorer
    - Microsoft가 Window 95에 번들로 제공하며 무료 배포 정책으로 빠르게 확대
    - 브라우저 시장에서 우위를 점하기 위해 기능과 지원이 빠르게 발전했고 IE가 우위를 점하게 되었으며 Netscope는 시장에서 밀려 Mozilla 프로젝트로 전환
    - 이러한 과정에서 다양성, 호환성에 대한 문제를 해결하기 위해 웹 표준이 탄생

## 다양한 웹 브라우저의 등장

Mozilla Firefox, Google Chrome과 같은 현대적인 브라우저들이 등장하며 웹 표준 준수와 성능을 목표로 개발됨

최근에는 Arc와 같은 새로운 브라우저가 등장하며 UX가 혁신적으로 변화 중

→ 웹 표준의 정립은 모든 브라우저가 특정 기술을 지원하도록 하여 개발자들이 더 일관되고 호환성있는 웹 앱을 개발 가능

> 모든 브라우저과 웹 표준을 지키겠지만 크롬 브라우저 권장같은 것이 있는 이유
모든 브라우저를 지원하는 것이 쉽지 않기 때문에 여건상 특정 브라우저에 맞춰 개발하는 경우가 있다.
> 

# JavaScript의 발전

## JS의 초기 역사와 역할

JS의 탄생(1995)

- 웹 페이지 동적 콘텐츠 생성을 위해 설계
- Netscope의 Brendan Eich가 10일 만에 개발

JS의 역할

- 클라이언트 측에서 실행되는 스크립트 언어로 HTML, CSS와 함께 사용

## ECMAScript의 변화 과정

ECMAScript1 (1997) : 자바스크립트의 기본 문법과 기능 표준화

ECMAScript3 (1999) : 정규 표현식, try/catch 구문 등 기능 추가

ECMAScript5 (2009) : JSON 지원,Array/Object 등의 메서드 추가

ECMAScript6 (2015) : let, const키워드 도입, 화살표 함수 도입, 클래스 문법 도입, 모듈 시스템 도입, 프로미스 도입으로 비동기 프로그래밍 간소화, 템플릿 리터럴과 다중 행 문자열 지원

ECMAScript7(2016) 이후 : 지수 연산자(**) 도입, async/await 도입으로 비동기 프로그래밍 개선, Rest/Spread 프로퍼티, Asyncronous Iteration 추가, Array.prototype.flat 등 추가

# 크로스 브라우징 이해하기

## 크로스 브라우징의 개념과 중요성

### 크로스 브라우징의 개념

다양한 웹 브라우저에서 웹 사이트가 일관되게 동작하도록 개발하는 것

모든 사용자에게 동일한 경험 제공을 위해 다양한 브라우저 환경에서 호환성 고려 중요

### 크로스 브라우징의 중요성

- UX 향상
- 접근성 보장
- SEO 개선 : 검색 엔진에서도 웹 사이트가 잘 표시되도록 도와줌

## 크로스 브라우징 테스트의 필요성

### 테스트 중요성

- 사용자 환경을 최대한 동일하게 보장하기 위해 필수
- 문제를 서전에 해결하여 이후 발생할 수 있는 유지 보수 비용을 줄임

### 테스트 전략

- 주요 브라우저와 버전을 선정하여 자동화 도구를 활용한 지속적인 테스트 진행
- 사용자 피드백을 통한 추가적인 호환성 문제 파악 및 수정

### 크로스 브라우징 테스트

- 다양한 브라우저에서 웹사이트를 테스트할 수 있는 도구(BrowserStack) 등 사용

## 크로스 브라우징으로 브라우저 간 호환성 문제를 해결할 수 있을까?

사실상 모든 브라우저에서 같은 결과로 표현되도록 하는 것은 불가능하기 때문에 서로 다른 브라우저와 기기에서의 차이를 최소화하고 중요한 스타일과 기능이 일관되게 서비스 되도록 보장하는 것이 중요

## 브라우저 호환성 테스트 방법

BrowserStack, CrossBrowserTesting 등 도구를 활용하여 테스트

Can I Use를 활용하여 웹 기능이 어느 브라우저까지 지원하는지 확인

# 크로스 브라우징을 위한 개발 방법론

## 다양한 브라우저에서 일관된 동작을 보장하는 방법

### CSS 호환성 문제 해결하기

1. CSS 스타일 초기화 : 브라우저마다 다른 기본 CSS 스타일을 초기화하여 동일한 기본 스타일로 설정
2. Autoprefixer : 최신 CSS 표준을 사용하면서도 오래된 브라우저에서 제대로 동작하도록 함
    - Autoprefixer는 Vender Prefix(벤더 접두사)를 자동으로 붙여주는 기능을 함
    - Vendor Prefix는 웹 표준이 확립되지 않았거나 브라우저 . 간호환성이 부족할 때 특정 CSS 속성이나 JS 기능에 대해 각 브라우저 제조사 별로 접두사를 붙여 사용하는 기술, 주로 특정 기능이 실험적이거나 표준화 과정 중인 경우에 사용
3. CSS 프레임워크 사용 : 미리 정의된 클래스와 스타일을 사용하여 다양한 브라우저에서 호환되는 일관된 디자인 구현 가능

### JS API 지원 차이 문제 해결하기

1. 폴리필(Polyfill)
    - 구형 문법으로 신형 API로 구현한 코드
2. 트랜스파일러(Transpiler)
    - 최신 JS 코드를 오래된 브라우저에서도 실행 가능하도록 변환

### 기타 호환성 문제 해결 방법

1. 브라우저 개발자 도구 활용
2. 브라우저 별 CSS 처리
3. 브라우저 별 JS 처리
4. 프론트엔드 프레임워크 및 라이브러리 사용

## 폴리필(Polyfill)의 개념과 활용

## 폴리필의 개념과 필요성

### 폴리필의 개념

폴리필은 최신 웹 기술을 지원하지 않는 브라우저에서 최신 기능을 사용할 수 있도록 하는 코드 또는 플러그인

### 폴리필의 필요성

모든 브라우저가 최신 웹 표준을 지원하지 않음

## Promise 폴리필 예제

Promise는 ES6에서 도입된 기능으로 구형브라우저에서 지원하지 않을 수 있으므로 core.js와 같은 라이브러리로 Promise를 폴리필할 수 있음

```jsx
import "core-js/feature/promise";
```

## CSS 변수 폴리필 예제

```jsx
import cssVars from "css-cars-ponyfill"
cssVars();

body{
	background-color: var(--primary-color);
}
```

## 폴리필 사용 시의 고려 사항

- 성능 : 폴리필은 추가적인 코드 로드를 필요로 하기 때문에 성능에 영향
- 정확성 : 모든 폴리필이 원래 기능 100% 구현하지 않을 수 있음
- 브라우저 지정 : 폴리필을 적용할 브라우저를 신중하게 선택
- 유지 관리 : 폴리필 라이브러리가 지속적 업데이트가 되는지 확인

# 트랜스파일러와 빌드 도구

## 트랜스파일러의 개념

한 프로그래밍 언어로 작성된 코드를 다른 프로그래밍 언어로 변환하는 도구, 주로 최신 JS 기능을 지원하지 않는 브라우저에서도 사용할 수 있도록 변환하는데 사용

- Babel : 최신 JS 문법을 구형 브라우저에서도 동작할 수 있는 코드로 변환
- TypeScript : 정적 타입 검사 기능을 제공하는 TypeScript 코드를 JS코드로 변환

## 빌드 도구

프로젝트 소스 코드를 배포 가능한 형태로 변환하고 여러 작업을 자동화, 주로 코드 번들링, 파일 압축, 트랜스 파일링을 수행

주요 빌드 도구로 Webpack, Rollup이 있음

- Webpack : 모듈 번들러로써 여러 파일을 하나의 번들 파일로 결합, 파일 압축, 트랜스 파일링 등 작업 수행 가능
- Rollup : 주로 라이브러리나 패키지의 번들링에 사용, 트리 쉐이킹 기능을 지원하여 사용하지 않는 코드를 자동으로 제거
